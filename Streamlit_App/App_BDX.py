import streamlit as st
import pandas as pd
import plotly.express as px
from PIL import Image
import folium
from streamlit_folium import st_folium
import branca.colormap as cm
import requests
import zipfile
import io
import plotly.express as px

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt 
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score, KFold, learning_curve, cross_val_score, GridSearchCV
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.utils import resample
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.inspection import PartialDependenceDisplay
import shap
import statsmodels.api as sm
import statsmodels.formula.api as smf
import joblib
import os

# Ajouter un style CSS pour personnaliser les couleurs
def add_custom_styles():
    st.markdown(
        """
        <style>
        /* Couleur pour la barre lat√©rale */
        section[data-testid="stSidebar"] {
            background-color: #A8E6A3; /* Vert clair */
            color: black; /* Texte noir */
        }
        /* Alignement des √©l√©ments */
        .sidebar-content {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        /* Couleur des titres principaux */
        h1, h2, h3 {
            color: black;
        }
        </style>
        """,
        unsafe_allow_html=True
    )


# Appliquer le style personnalis√©
add_custom_styles()


 
# URLs des logos h√©berg√©s sur GitHub
logo_isup_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/Logo-ISUP.jpg"
logo_gov_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/gov.png"
 
 
try:
    # Charger le logo gov.br en haut, centr√©
    st.sidebar.markdown("<div style='text-align: center;'><img src='{}' width='100'></div>".format(logo_gov_url), unsafe_allow_html=True)

    # Ajouter le texte sous le logo gov.br
    st.sidebar.markdown("<h2 style='text-align: center; color: #004C29;'>Projet de Data Visualisation</h2>", unsafe_allow_html=True)
    st.sidebar.markdown("<h3 style='text-align: center; color: #004C29;'>Groupe BDX</h3>", unsafe_allow_html=True)
    st.sidebar.markdown("<p style='text-align: center; color: #004C29;'>BAENA Miguel</p>", unsafe_allow_html=True)
    st.sidebar.markdown("<p style='text-align: center; color: #004C29;'>DAKPOGAN Paul</p>", unsafe_allow_html=True)
    st.sidebar.markdown("<p style='text-align: center; color: #004C29;'>XU J√©r√©my</p>", unsafe_allow_html=True)

    # Ajouter le logo ISUP apr√®s les noms, centr√©
    st.sidebar.markdown("<div style='text-align: center;'><img src='{}' width='100'></div>".format(logo_isup_url), unsafe_allow_html=True)

except Exception as e:
    st.sidebar.error(f"Une erreur est survenue avec les logos : {e}")



# Charger les donn√©es
# Lien brut (raw)
zip_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/datavis_long_lat_with_grupo.zip"
# T√©l√©charger et d√©compresser
response = requests.get(zip_url)
zip_file = zipfile.ZipFile(io.BytesIO(response.content))
 
# Lire un fichier CSV sp√©cifique √† l'int√©rieur du ZIP
with zip_file.open('datavis_long_lat_with_grupo.csv') as file:
    data = pd.read_csv(file)
 
try:
    

    # V√©rifiez si les colonnes n√©cessaires existent
    required_columns = ['Region_Name', 'ANO_MODELO_Class', 'COBERTURA', 'INDENIZ', 'AGE_Group', 'COD_MODELO', 'SEXO']
    if not all(col in data.columns for col in required_columns):
        st.error("Certaines colonnes n√©cessaires sont manquantes dans vos donn√©es.")
    else:
        # Configuration des onglets
        tabs = st.tabs(["Introduction", "Composition du Portefeuille", "Analyses", "Cartographie", "Outils de Tarification", "Interpretations Mod√®le"])

        # **Onglet 1 : Introduction**
        with tabs[0]:
            st.title("Introduction")
            st.markdown("""
            Bienvenue dans ce projet de **Data Visualisation** d√©velopp√© par le groupe **BDX**. 
            Ce tableau de bord interactif est con√ßu pour analyser et explorer des donn√©es d'assurance au Br√©sil. 
            Voici un aper√ßu des diff√©rents onglets disponibles dans cette application :

            ### **1. Composition du Portefeuille**
            - Analyse des caract√©ristiques principales des polices d'assurance, notamment :
                - La r√©partition des clients par tranche d'√¢ge et sexe.
                - La r√©partition des types de couverture.
                - Le nombre d'√©l√©ments dans chaque groupe de v√©hicules.

            ### **2. Analyses**
            - Exploration visuelle des donn√©es √† travers :
                - L'indemnit√© totale par type de v√©hicule ou par groupe.
                - Les relations entre les causes de sinistres et les indemnit√©s (boxplot).
                - La distribution des indemnit√©s par type de couverture.

            ### **3. Cartographie**
            - Visualisation dynamique des donn√©es g√©ographiques :
                - Carte des nombres de sinistres par r√©gion.
                - Carte des co√ªts d'indemnit√©s par r√©gion.

            ### **4. Outils de Tarification**
            - Impl√©mentation de deux mod√®les **XGBoost** pour pr√©dire la fr√©quence et la s√©v√©rit√© respectivement.
                        
            ### **5. Interpr√©tations Mod√®les**
            - Cet onglet fournit une analyse des mod√®les pr√©dictifs en utilisant des outils tels que :
                - Les graphiques **SHAP** (SHapley Additive exPlanations) pour interpr√©ter les contributions des variables au mod√®le.
        
            Ce tableau de bord est une d√©monstration de l'application des outils de **data science**, **mod√©lisation** et **visualisation** dans le domaine des assurances. 
            Prenez le temps d'explorer chaque onglet pour une meilleure compr√©hension des donn√©es et des r√©sultats. üéâ
            """)

        # **Onglet 2 : Composition du Portefeuille**
        with tabs[1]:
            st.title("Composition du Portefeuille")

            col1, col2 = st.columns(2)

            # R√©partition par tranche d'√¢ge
            with col1:
                st.header("R√©partition par tranche d'√¢ge")
                age_distribution = data['AGE_Group'].value_counts().reset_index()
                age_distribution.columns = ['Tranche d\'√¢ge', 'Nombre']
                age_fig = px.bar(
                    age_distribution, 
                    x='Tranche d\'√¢ge', 
                    y='Nombre', 
                    title="R√©partition par tranche d'√¢ge",color_discrete_sequence=["#6EAA6B"]
                )
                st.plotly_chart(age_fig, use_container_width=True)

            # R√©partition par sexe
            with col2:
                st.header("R√©partition par sexe")
                gender_distribution = data['SEXO'].value_counts().reset_index()
                gender_distribution.columns = ['Sexe', 'Nombre']
                gender_fig = px.pie(
                    gender_distribution, 
                    names='Sexe', 
                    values='Nombre', 
                    title="R√©partition par sexe", color='Sexe',  # D√©finir les couleurs sp√©cifiques
                    color_discrete_map={
                'M': '#A8E6A3',  # Vert clair
                'F': '#228B22'   # Vert plus fonc√©
                    }
                )
                st.plotly_chart(gender_fig, use_container_width=True)

            # R√©partition par type de couverture
            st.header("R√©partition des types de couverture")
            coverage_mapping = {
                1: "Couverture compl√®te",
                2: "Couverture incendie et vol",
                3: "Couverture incendie",
                4: "Indemnisation int√©grale",
                5: "Couverture collision et incendie",
                9: "Autres"
            }
            data['Coverage_Label'] = data['COBERTURA'].map(coverage_mapping)
            coverage_fig = px.pie(data, names='Coverage_Label', title="Types de couverture", hole=0.4,color_discrete_sequence=["#6EAA6B"])
             # Ajouter des options de mise en forme
            coverage_fig.update_traces(textinfo='percent+label')  # Afficher pourcentage + label
            coverage_fig.update_layout(
                legend_title="Types de couverture",  # Titre pour la l√©gende
                height=500,  # Hauteur du graphique
                width=700    # Largeur du graphique
            )
            st.plotly_chart(coverage_fig, use_container_width=True)
            # Ajouter un mapping des causes de sinistres
            causa_mapping = {
                1: "Vol/Rapt",
                2: "Vol",
                3: "Rapt",
                4: "Collision partielle",
                5: "Collision avec indemnisation int√©grale",
                6: "Incendie",
                7: "Assistance 24 heures",
                9: "Autres"
            }

            # Mapper les causes de sinistres
            data['CAUSA_MAPPED'] = data['CAUSA'].map(causa_mapping)

            # Calculer la distribution des causes de sinistres
            cause_distribution = data['CAUSA_MAPPED'].value_counts().reset_index()
            cause_distribution.columns = ['Cause de sinistre', 'Nombre']

            # Cr√©er un graphique circulaire
            cause_pie_chart = px.pie(
                cause_distribution,
                names='Cause de sinistre',
                values='Nombre',
                title="R√©partition des causes de sinistre",
                hole=0.4,color_discrete_sequence=["#6EAA6B"]
            )

            # Ajouter des options de mise en forme
            cause_pie_chart.update_traces(textinfo='percent+label')
            cause_pie_chart.update_layout(
                legend_title="Cause de sinistre",
                height=500,
                width=700
            )

            # Afficher le graphique dans Streamlit
            st.header("R√©partition des causes de sinistre")
            st.plotly_chart(cause_pie_chart, use_container_width=True)

            # **Nombre d'occurrences par groupe (GRUPO)**
            st.header("Mod√®les de v√©hicules")
            group_counts = data['GRUPO'].value_counts().reset_index()
            group_counts.columns = ['GRUPO', 'Nombre']
            group_counts = group_counts.sort_values(by='Nombre', ascending=False)

            # Limiter l'affichage initial aux 10 premiers groupes
            top_10_groups = group_counts.head(10)
            remaining_groups = group_counts.iloc[10:]  # Les groupes restants

            # Cr√©er le graphique pour les 10 premiers groupes
            top_10_fig = px.bar(
                top_10_groups,
                x='Nombre',
                y='GRUPO',
                orientation='h',
                title="Top 10 des mod√®les de v√©hicules assur√©s",
                labels={'Nombre': 'Nombre de v√©hicules', 'GRUPO': 'Groupe'},color_discrete_sequence=["#6EAA6B"]
            )

            top_10_fig.update_layout(
                height=400,
                xaxis=dict(title="Nombre d'√âl√©ments"),
                yaxis=dict(title="Groupe", automargin=True, categoryorder='total ascending')
            )

            # Afficher le graphique des 10 premiers groupes
            st.plotly_chart(top_10_fig, use_container_width=True)

           
        # **Onglet 3 : Analyse**
        with tabs[2]:
            st.title("Analyse des indemnit√©s")

            # R√©partition des indemnit√©s par tranche d'√¢ge
            st.header("Indemnit√© moyenne par tranche d'√¢ge")
            age_indemnity = data.groupby('AGE_Group')['INDENIZ'].mean().reset_index()
            age_fig = px.bar(
                age_indemnity,
                x='AGE_Group',
                y='INDENIZ',
                title="Indemnit√© moyenne par tranche d'√¢ge",
                labels={'INDENIZ': 'Indemnit√© moyenne (R$)', 'AGE_Group': 'Tranche d\'√¢ge'},color_discrete_sequence=["#6EAA6B"]
            )
            st.plotly_chart(age_fig, use_container_width=True)

            # Indemnit√© totale par mod√®le de v√©hicule
            st.header("Indemnit√© totale par mod√®le de v√©hicule")

            # Grouper les donn√©es par groupe et calculer l'indemnit√© totale
            group_indemnity = data.groupby('GRUPO')['INDENIZ'].sum().reset_index()

            # Trier les groupes par indemnit√© totale d√©croissante
            group_indemnity = group_indemnity.sort_values(by='INDENIZ', ascending=False)

            # Ne conserver que les 10 premiers groupes
            top_10_indemnity = group_indemnity.head(10)

            # Cr√©er un graphique horizontal pour le top 10
            group_indemnity_fig = px.bar(
                top_10_indemnity,
                x='INDENIZ',
                y='GRUPO',
                orientation='h',
                title="Top 10 des v√©hicules par indemnit√© totale",
                labels={'INDENIZ': 'Indemnit√© Totale (R$)', 'GRUPO': 'V√©hicules'},color_discrete_sequence=["#8CCB87"]
            )

            # Configurer l'apparence du graphique
            group_indemnity_fig.update_layout(
                height=600,
                xaxis=dict(title="Indemnit√© totale (R$)"),
                yaxis=dict(title="Groupe", automargin=True, categoryorder='total ascending')
            )

            # Afficher le graphique
            st.plotly_chart(group_indemnity_fig, use_container_width=True)
            st.header("Indemnit√© par cause de sinistre")
    
           # Mapping des valeurs de CAUSA
            causa_mapping = {
                1: "Vol/Rapt",
                2: "Vol",
                3: "Rapt",
                4: "Collision partielle",
                5: "Collision avec indemnisation int√©grale",
                6: "Incendie",
                7: "Assistance 24 heures",
                9: "Autres"
            }

            # Ajouter une colonne mapp√©e dans le DataFrame
            data['CAUSA_MAPPED'] = data['CAUSA'].map(causa_mapping)

            # Ajouter un boxplot dans le troisi√®me onglet
            with tabs[2]:
                
                
                
                # Cr√©er un boxplot avec Plotly Express
                causa_boxplot_mapped = px.box(
                    data,
                    x='CAUSA_MAPPED',
                    y='INDENIZ',
                    title="Relation entre la cause et l'indemnit√© du sinistre",
                    labels={'CAUSA_MAPPED': 'Cause de sinistre', 'INDENIZ': 'Indemnit√© (R$)'},color_discrete_sequence=["#6EAA6B"]
                )
                
                # Configurer le graphique
                causa_boxplot_mapped.update_layout(
                    xaxis=dict(title="Cause de sinistre"),
                    yaxis=dict(title="Indemnit√© (R$)"),
                    height=500,
                    width=800
                )
                
                # Afficher le graphique dans Streamlit
                st.plotly_chart(causa_boxplot_mapped, use_container_width=True)
                # Ajouter un mapping des types de couverture
                coverage_mapping = {
                    1: "Couverture compl√®te",
                    2: "Couverture incendie et vol",
                    3: "Couverture incendie",
                    4: "Indemnisation int√©grale",
                    5: "Couverture collision et incendie",
                    9: "Autres"
                }

                # Mapper les types de couvertures
                data['COBERTURA_MAPPED'] = data['COBERTURA'].map(coverage_mapping)

                # Cr√©er un boxplot des indemnit√©s par type de couverture
                coverage_boxplot = px.box(
                    data,
                    x='COBERTURA_MAPPED',
                    y='INDENIZ',
                    title="Indemnit√© par type de couverture",
                    labels={'COBERTURA_MAPPED': 'Type de couverture', 'INDENIZ': 'Indemnit√© (R$)'},color_discrete_sequence=["#6EAA6B"]
                )

                # Mettre √† jour le style du graphique
                coverage_boxplot.update_layout(
                    xaxis_title="Type de couverture",
                    yaxis_title="Indemnit√© (R$)",
                    height=600,
                    width=800
                )

                # Afficher le graphique dans Streamlit
                st.header("Indemnit√© par type de couverture")
                
                st.plotly_chart(coverage_boxplot, use_container_width=True)



        # **Onglet 4 : Cartographie**
        with tabs[3]:
            st.header("Visualisation du co√ªt des sinistres par √©tat")
            
            
        
            carto_data_path = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/Aggregated_Claims_Data_by_Region.csv"
            carto_data = pd.read_csv(carto_data_path)
 
            # Cr√©er une carte Folium
            m = folium.Map(location=[-14.2350, -51.9253], zoom_start=4)

            # D√©finir l'√©chelle de couleur
            color_scale = cm.LinearColormap(
                colors=['#003366', '#008000', '#FFD700'],
                vmin=carto_data['Total_Claims'].min(),
                vmax=carto_data['Total_Claims'].max(),
                caption='Montant des sinitres (R$)'
            )
            # Ajouter l'√©chelle de couleurs √† la carte
            color_scale.add_to(m)
            # Ajouter des r√©gions sur la carte
            scale_factor = 1e6
            max_radius = 30
            for _, row in carto_data.iterrows():
                folium.CircleMarker(
                    location=(row['Latitude'], row['Longitude']),
                    radius=min(max(row['Total_Claims'] / scale_factor, 5), max_radius),
                    color=color_scale(row['Total_Claims']),
                    fill=True,
                    fill_color=color_scale(row['Total_Claims']),
                    fill_opacity=0.8,
                    tooltip=(
                        f"<strong>{row['Region_Name']}</strong><br>"
                        f"Total Claims: R$ {round(row['Total_Claims']):,}<br>"
                        f"Average Claims: R$ {round(row['Average_Claims']):,}"
                    )
                ).add_to(m)

            # Afficher la carte dans Streamlit
            st_folium(m, width=700, height=500)


            file_path = 'https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/Cleaned_Merged_Claims_Data.csv'
            data = pd.read_csv(file_path, sep=';')
            # Titre pour la nouvelle carte
            st.header("Visualisation du nombre de sinistre par √©tat")

            # Cr√©er une carte Folium
            m = folium.Map(location=[-14.2350, -51.9253], zoom_start=4)  # Centr√© sur le Br√©sil

            # D√©finir une √©chelle de couleur bas√©e sur "number_of_claims_updated"
            color_scale = cm.LinearColormap(
                colors=['#003366', '#008000', '#FFD700'],  # Palette gov.br : bleu, vert, jaune
                vmin=data['number_of_claims_updated'].min(),
                vmax=data['number_of_claims_updated'].max(),
                caption='Nombre de sinistre'
            )

            # Ajouter l'√©chelle de couleurs √† la carte
            m.add_child(color_scale)

            # Ajouter les r√©gions sur la carte
            scale_factor = 1e4  # Facteur d'√©chelle pour la taille des cercles
            max_radius = 50  # Rayon maximum des cercles
            for _, row in data.iterrows():
                radius = max(row['number_of_claims_updated'] / scale_factor, 5)  # Calculer le rayon
                folium.CircleMarker(
                    location=(row['Latitude'], row['Longitude']),
                    radius=min(radius, max_radius),  # Limiter le rayon
                    color=color_scale(row['number_of_claims_updated']),
                    fill=True,
                    fill_color=color_scale(row['number_of_claims_updated']),
                    fill_opacity=0.8,
                    tooltip=(
                        f"<strong>{row['Region_Name']}</strong><br>"
                        f"Nombre de sinistre : {round(row['number_of_claims_updated']):,}"
                    )
                ).add_to(m)

            # Afficher la carte dans Streamlit
            st_folium(m, width=700, height=500)


        # **Onglet 6 : Tarification**
        with tabs[4]:
            st.markdown("""
            Cet onglet fournit un outil r√©alisant une tarification simplifi√©e selon une logique de fr√©quence-s√©v√©rit√© avec deux mod√®les XGBOOST.
            """)

            # Fonction pour t√©l√©charger un fichier depuis une URL
            def download_model(url, filename):
                response = requests.get(url)
                if response.status_code == 200:
                    with open(filename, 'wb') as file:
                        file.write(response.content)
                    return filename
                else:
                    st.error(f"Erreur lors du t√©l√©chargement du mod√®le : {url}")
                    return None

            # Ajouter un style CSS pour personnaliser les boutons et les hypoth√®ses
            st.markdown(
                """
                <style>
                /* Style pour le bouton pr√©dire */
                .stButton > button {
                    background-color: #FF4B4B;
                    color: white;
                    font-size: 18px;
                    padding: 10px 20px;
                    border-radius: 8px;
                    border: none;
                    cursor: pointer;
                    display: block;
                    margin: 20px auto; /* Centrer horizontalement */
                }
                .stButton > button:hover {
                    background-color: #D03434;
                }

                /* Style pour la bo√Æte des hypoth√®ses */
                .hypotheses-box {
                    background-color: #f0f8ff; /* Bleu clair */
                    padding: 15px;
                    margin-bottom: 20px;
                    border-radius: 8px;
                    border: 1px solid #dcdcdc;
                }

                /* Style pour les bo√Ætes de s√©lection */
                .stSelectbox {
                    background-color: #f5f5f5 !important; /* Gris clair */
                    color: #333333 !important; /* Texte gris fonc√© */
                    border: 1px solid #dcdcdc !important; /* Bordure grise */
                    padding: 10px !important;
                    border-radius: 8px !important;
                }
                </style>
                """,
                unsafe_allow_html=True
            )

            # Fonction principale pour la tarification
            def run_tarification():
                st.title("Outil de tarification - Fr√©quence & S√©v√©rit√©")

                # T√©l√©chargement des mod√®les
                model_frequency_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/model_pipeline_frequency.pkl"
                model_severity_url = "https://raw.githubusercontent.com/jeremyxu-pro/BDX_Project/main/DataViz/model_pipeline_severity.pkl"

                frequency_model_file = download_model(model_frequency_url, "model_pipeline_frequency.pkl")
                severity_model_file = download_model(model_severity_url, "model_pipeline_severity.pkl")

                if not frequency_model_file or not severity_model_file:
                    return

                try:
                    # Charger les mod√®les depuis les fichiers t√©l√©charg√©s
                    model_frequency = joblib.load(frequency_model_file)
                    model_severity = joblib.load(severity_model_file)
                except Exception as e:
                    st.error(f"Erreur lors du chargement des mod√®les : {e}")
                    return

                # R√©cup√©rer les cat√©gories pour les colonnes
                preprocessor = model_frequency.named_steps['preprocessor']
                encoder = preprocessor.named_transformers_['cat'].named_steps['onehot']
                categories = encoder.categories_
                cat_cols = preprocessor.transformers_[0][1].feature_names_in_

                # Entr√©es utilisateur
                st.subheader("S√©lectionnez les caract√©ristiques de tarification :")
                inputs = {}
                col1, col2 = st.columns(2)
                for i, col in enumerate(cat_cols):
                    label_french = {
                        "DrivAge": "Tranche d'√¢ge du conducteur :",
                        "HadRob": "A-t-il subi au moins un vol ?",
                        "HadPartColl": "A-t-il subi au moins une collision partielle ?",
                        "HadTotColl": "A-t-il subi au moins une collision totale ?",
                        "HadFire": "A-t-il subi au moins un incendie ?",
                        "HadOther": "A-t-il subi d'autres dommages non r√©pertori√©s ?",
                        "VehYear_Class": "Ann√©e du mod√®le de v√©hicule :",
                        "Region": "R√©gion :",
                        "VehGroup_bin": "Cat√©gorie de v√©hicule :",
                    }.get(col, col)

                    with col1 if i % 2 == 0 else col2:
                        inputs[col] = st.selectbox(f"{label_french}", options=categories[i])

                # Bouton de pr√©diction
                if st.button("Pr√©dire"):
                    try:
                        # Pr√©parer les donn√©es d'entr√©e
                        new_observation = pd.DataFrame([inputs])

                        # Pr√©dictions
                        freq_prediction = model_frequency.predict(new_observation)[0]
                        sev_prediction = model_severity.predict(new_observation)[0]

                        # Calcul de la prime pure
                        prime_pure = freq_prediction * sev_prediction

                        # Afficher les r√©sultats
                        st.success(f"Montant de la prime pure annuelle pr√©dite : {prime_pure:,.2f} R$")
                    except Exception as e:
                        st.error(f"Une erreur est survenue pendant la pr√©diction : {e}")

            # Appel de la fonction dans l'onglet Tarification
            run_tarification()

            # **Onglet 5 : Interpretation Mod√®le**
        with tabs[5]:
            st.title("Interpretation Mod√®le")
            st.markdown("""
            Cet onglet affiche les graphiques SHAP (SHapley Additive exPlanations) permettant d'interpr√©ter les contributions des variables dans nos deux mod√®les. Nous mettons en avant uniquement les 10 variables ayant les contributions les plus significatives. Par ailleurs, il est important de noter que l'analyse est r√©alis√©e √† l'√©chelle des classes, afin d'√©viter toute compensation qui pourrait survenir en passant √† une √©chelle plus agr√©g√©e, soit celle des variables individuelles.
            """)

            # Charger les mod√®les
            model_frequency_file = "model_pipeline_frequency.pkl"
            model_severity_file = "model_pipeline_severity.pkl"

            try:
                # Charger les mod√®les
                model_frequency = joblib.load(model_frequency_file)
                model_severity = joblib.load(model_severity_file)

                # Extraire le pr√©processeur et le mod√®le final
                preprocessor_frequency = model_frequency.named_steps['preprocessor']
                final_model_frequency = model_frequency.named_steps['model']

                preprocessor_severity = model_severity.named_steps['preprocessor']
                final_model_severity = model_severity.named_steps['model']

                # G√©n√©rer des donn√©es synth√©tiques bas√©es sur les colonnes attendues
                def generate_synthetic_data(preprocessor, n_samples=100):
                    """G√©n√©rer des donn√©es synth√©tiques compatibles avec le pr√©processeur."""
                    feature_names = preprocessor.transformers_[0][1].get_feature_names_out()
                    num_features = len(feature_names)
                    data = np.random.rand(n_samples, num_features)
                    return pd.DataFrame(data, columns=feature_names)

                # G√©n√©rer des donn√©es synth√©tiques pour fr√©quence et s√©v√©rit√©
                X_frequency_synthetic = generate_synthetic_data(preprocessor_frequency)
                X_severity_synthetic = generate_synthetic_data(preprocessor_severity)

                # Calcul des valeurs SHAP pour la fr√©quence
                explainer_frequency = shap.TreeExplainer(final_model_frequency)
                shap_values_frequency = explainer_frequency.shap_values(X_frequency_synthetic)

                # Calcul des valeurs SHAP pour la s√©v√©rit√©
                explainer_severity = shap.TreeExplainer(final_model_severity)
                shap_values_severity = explainer_severity.shap_values(X_severity_synthetic)

                # Affichage des graphiques SHAP
                st.subheader("Graphiques SHAP")

                # Ligne sup√©rieure : Graphiques d'importance
                col1, col2 = st.columns(2)

                with col1:
                    st.subheader("Importance des variables - Fr√©quence")
                    plt.figure(figsize=(10, 5))
                    shap.summary_plot(
                        shap_values_frequency,
                        X_frequency_synthetic,
                        plot_type="bar",
                        max_display=10,
                        show=False
                    )
                    st.pyplot(plt.gcf())

                with col2:
                    st.subheader("Importance des variables - S√©v√©rit√©")
                    plt.figure(figsize=(10, 5))
                    shap.summary_plot(
                        shap_values_severity,
                        X_severity_synthetic,
                        plot_type="bar",
                        max_display=10,
                        show=False
                    )
                    st.pyplot(plt.gcf())

                # Ligne inf√©rieure : R√©sum√©s SHAP
                col3, col4 = st.columns(2)

                with col3:
                    st.subheader("R√©sum√© SHAP - Fr√©quence")
                    plt.figure(figsize=(10, 5))
                    shap.summary_plot(
                        shap_values_frequency,
                        X_frequency_synthetic,
                        max_display=10,
                        show=False
                    )
                    st.pyplot(plt.gcf())

                with col4:
                    st.subheader("R√©sum√© SHAP - S√©v√©rit√©")
                    plt.figure(figsize=(10, 5))
                    shap.summary_plot(
                        shap_values_severity,
                        X_severity_synthetic,
                        max_display=10,
                        show=False
                    )
                    st.pyplot(plt.gcf())

            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration des graphiques SHAP : {e}")
            
            # Section pour l'analyse de d√©pendance SHAP dynamique
            st.subheader("Analyse de D√©pendance SHAP - Variables Cat√©goriques")

            # Charger les mod√®les
            @st.cache_resource
            def load_models():
                model_frequency_path = "model_pipeline_frequency.pkl"
                model_severity_path = "model_pipeline_severity.pkl"
                model_frequency = joblib.load(model_frequency_path)
                model_severity = joblib.load(model_severity_path)
                return model_frequency, model_severity

            # Charger les mod√®les
            model_frequency, model_severity = load_models()

            # Extraire les pr√©processeurs et mod√®les finaux
            preprocessor_frequency = model_frequency.named_steps['preprocessor']
            final_model_frequency = model_frequency.named_steps['model']

            preprocessor_severity = model_severity.named_steps['preprocessor']
            final_model_severity = model_severity.named_steps['model']

            # G√©n√©rer des donn√©es synth√©tiques pour la d√©monstration
            def generate_synthetic_data(preprocessor, n_samples=100):
                """G√©n√®re des donn√©es synth√©tiques compatibles avec le pr√©processeur."""
                feature_names = preprocessor.transformers_[0][1].get_feature_names_out()
                num_features = len(feature_names)
                data = np.random.rand(n_samples, num_features)
                return pd.DataFrame(data, columns=feature_names)

            X_frequency_synthetic = generate_synthetic_data(preprocessor_frequency)
            X_severity_synthetic = generate_synthetic_data(preprocessor_severity)

            # Calculer les valeurs SHAP pour les deux mod√®les
            explainer_frequency = shap.TreeExplainer(final_model_frequency)
            shap_values_frequency = explainer_frequency.shap_values(X_frequency_synthetic)

            explainer_severity = shap.TreeExplainer(final_model_severity)
            shap_values_severity = explainer_severity.shap_values(X_severity_synthetic)

            # Interface utilisateur : choix dynamique des variables
            st.subheader("Choisissez une variable principale et une variable d'interaction :")

            # Choix du mod√®le
            model_choice = st.radio(
                "Choisissez le mod√®le pour l'analyse :",
                options=["Fr√©quence", "S√©v√©rit√©"]
            )

            # D√©terminer les donn√©es et valeurs SHAP en fonction du mod√®le choisi
            if model_choice == "Fr√©quence":
                shap_values = shap_values_frequency
                X_sample = X_frequency_synthetic
                feature_names = X_frequency_synthetic.columns
            else:
                shap_values = shap_values_severity
                X_sample = X_severity_synthetic
                feature_names = X_severity_synthetic.columns

            # S√©lection des variables
            main_feature = st.selectbox("Caract√©ristique principale", feature_names)
            interaction_feature = st.selectbox("Caract√©ristique d'interaction", feature_names)

            # Bouton pour afficher le graphique de d√©pendance
            if st.button("Afficher le graphique de d√©pendance"):
                try:
                    # Affichage du graphique de d√©pendance SHAP avec correction des axes
                    plt.figure(figsize=(10, 6))
                    shap.dependence_plot(
                        main_feature,          # Variable principale (axe X)
                        shap_values=shap_values,           # Valeurs SHAP
                        features=X_sample,                 # Donn√©es utilis√©es pour SHAP
                        interaction_index=interaction_feature  # Variable d'interaction (colorim√©trie)
                    )
                    st.pyplot(plt.gcf())


                    st.write(
                        f"Le graphique ci-dessus montre la d√©pendance SHAP pour `{main_feature}` "
                        f"avec l'interaction `{interaction_feature}` bas√©e sur le mod√®le **{model_choice}**."
                    )
                except Exception as e:
                    st.error(f"Une erreur est survenue lors de la g√©n√©ration du graphique : {e}")





        
except FileNotFoundError:
    st.error(f"Fichier introuvable : {file_path}. V√©rifiez le chemin.")
except Exception as e:
    st.error(f"Une erreur est survenue : {e}")
